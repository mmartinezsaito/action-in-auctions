
from .main import ns, sp, D, B, D2
from .utils import confint_fisherinfo, bic, caic
from .fits_results_econoshyuka import *   
from .fits_results_actioninauctions import *   


### Estimate parameter variances ###
"""
  How to estimate confidence intervals for the loglikelihood function itself?
   Bootstrapping is ill-posed in trial-by-trial lhf encompassing sequential dependencies
    bootstrapping wuld require reestimating lhf minimum every resample, intractable
  one can report simply 
   the parameter confints
   and the lhf in each model type
"""

calcFishInfo = False
if calcFishInfo:
    agmodname = "11331_ffx_dr_naive_avf_101"
    agmodind = [i[0] for i in fp].index(agmodname)
    hes = nd.Hessian(nll_ffx_dr_avf) # OR nll_ffx_dr_nudger
    fp[agmodind][3] = hes(fp[agmodind][2])


hessian = [] 
fp[[i[0] for i in fp].index("1111_ffx_naive_gausnudger")][3] = \
              [[ 7.32355200e+03,-8.70976342e+03, 6.24565116e-01, 1.24945360e+03], 
               [-8.70976342e+03, 3.09308572e+04,-1.94711931,    -3.03465594e+03], 
               [ 6.24565116e-01,-1.94711931,     9.02228337e+02, 1.97534777e-01], 
               [ 1.24945360e+03,-3.03465594e+03, 1.97534777e-01, 4.51129846e+02]] 
hessian.append([[139.392221, 11.28439487, 6.43782988], [11.28439487, 54.82915617, -9.50453542], [6.43782988, -9.50453542, 12.83268609]]) # kalman_nudger
hessian.append([[1276.5806, -0.0142820868, -6.15243635], [-0.014282087, 2255.35148, -0.008113076], [-6.15243635, -0.008113076, 113.776092]]) # dr_gausnudger
hessian.append([[1.44216046e+06, 3.69372207e+03, -1.01774610e+04, 1.78311082e+04, -4.68403978e+02], 
                [3.69372207e+03, 1.22129391e+01, 2.16306295e+01, 4.66670673e+01, 4.95410931], 
                [-1.01774610e+04, 2.16306295e+01, 2.81694644e+03, -3.10508116e+03, 1.14542692e+02], 
                [1.78311082e+04, 4.66670673e+01, -3.10508116e+03, 5.21061143e+03, -3.29831177], 
                [-4.68403978e+02, 4.95410931, 1.14542692e+02, -3.29831177, 1.58184163e+01]]) # dr_naive_avf

fp[[i[0] for i in fp].index("11331_ffx_dr_naive_avf_101")][3] = \
              [[ 2.82645937e+04, 2.33617030e+03,-2.80682533e+02, 7.46734194e+01, 3.05405461e+02, 2.11369897e+02, 1.46933374e+02, 7.07031413e+01,-1.31158714e+02],
               [ 2.33617030e+03, 3.01898729e+02,-2.44619468e+00, 3.81355255e+01,-6.67774587e+01, 3.15030688e+01, 7.71729939e+01,-1.58549020e+01, 7.18321036e+01],
               [-2.80682533e+02,-2.44619468e+00, 2.13699283e+02, 7.31173701e+01, 1.62144584e+00,-1.55756349e+01, 6.27162502e-10,-1.00168280e-11, 1.99999453e+01],
               [ 7.46734194e+01, 3.81355255e+01, 7.31173701e+01, 1.32567675e+02, 2.53775271e+00,-2.43776934e+01,-6.01017986e-10, 5.22590595e-11, 3.13022576e+01],
               [ 3.05405461e+02,-6.67774587e+01, 1.62144584e+00, 2.53775271e+00, 3.68366788e+02,-1.14574588e+01, 6.66070924e+00,-1.76333992e+00,-9.12696607e+01],
               [ 2.11369897e+02, 3.15030688e+01,-1.55756349e+01,-2.43776934e+01,-1.14574588e+01, 1.20984074e+02,-6.39685781e+01, 1.69397647e+01,-2.10375516e+01],
               [ 1.46933374e+02, 7.71729939e+01, 6.27162502e-10,-6.01017986e-10, 6.66070924e+00,-6.39685781e+01, 5.91908320e+02,-5.00447251e+02, 8.21574278e+01],
               [ 7.07031413e+01,-1.58549020e+01,-1.00168280e-11, 5.22590595e-11,-1.76333992e+00, 1.69397647e+01,-5.00447251e+02, 6.32211058e+02,-2.17501573e+01],
               [-1.31158714e+02, 7.18321036e+01, 1.99999453e+01, 3.13022576e+01,-9.12696607e+01,-2.10375516e+01, 8.21574278e+01,-2.17501573e+01, 1.47499047e+02]] 
fp[[i[0] for i in fp].index("11111_ffx_dr_lepkurnudger6")][3] = \
               [[-8.96929525e+01,-5.68016561e+01,-6.11324767e+00, 3.21541437e+01, 3.67322969e+00],
                [-5.68016561e+01, 1.48024153e+03,-6.87042464e-11, 7.33044983e-11,-1.08521573e-09],
                [-6.11324767e+00,-6.87042464e-11, 5.36304698e+02,-1.02771716e-11,-4.22304034e-10],
                [ 3.21541437e+01, 7.33044983e-11,-1.02771716e-11, 1.20499287e+03,-2.19969256e-11],
                [ 3.67322969e+00,-1.08521573e-09,-4.22304034e-10,-2.19969256e-11, 5.14312929e+03]] 


conflev = 0.95
for f in fp:
    try:
        f[4] = confint_fisherinfo(f[3], conflev)
    except ValueError:
        pass
    f.append(bic(f[1], ns, len(f[2])))
    f.append(caic(f[1], ns, len(f[2])))
for f in efp:
    try:
        f[4] = confint_fisherinfo(f[3], conflev)
    except ValueError:
        pass
    f.append(bic(f[1], ns, len(f[2])))
    f.append(caic(f[1], ns, len(f[2])))

bsl = sorted([(f[5], f[6], f[0]) for f in fp])
bsl2 = sorted([(f[5], f[6], f[0]) for f in efp])


